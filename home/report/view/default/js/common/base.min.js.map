{"version":3,"sources":["bb.js","common.js","polyfill.js","shim.js"],"names":[],"mappingszDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxlJA","file":"base.min.js","sourcesContent":["/**\n * Betterlife JavaScript Library\n * Copyright (c) 2016 skygreen2001@gmail.com\n * @see APICloud script/app.js\n * @see 可想造一个属于你自己的jQuery库?: https://github.com/MeCKodo/forchange\n * @author skygreen2001 skygreen2001@gmail.com\n */\n(function(window, document){\n  var ua = navigator.userAgent.toLowerCase();\n\n  var Bb = function(selector) {\n    return new Bb.prototype.init(selector);\n  };\n\n  /************************* 定义静态方法:start ************************/\n  Bb.t = Bb.u = Bb.tools = Bb.utils = {\n    ua      : navigator.userAgent.toLowerCase(),\n    browser : {\n      trident : /trident/.test(ua),//IE内核\n      mobile  : !!ua.match(/applewebkit.*mobile.*/) || !!ua.match(/applewebkit/),\n      android : /android/.test(ua) || /linux/.test(ua),\n      ios     : !!ua.match(/\\(i[^;]+;( u;)? cpu.+mac os x/)\n    },\n\n    /************************* 函数区:start ************************/\n    //判断字符串是否为空\n    empty : function(data) {\n      if (typeof(data) == \"undefined\") return true;\n      if (!data) return true;\n      if ((typeof(data) == \"string\") && data.replace(/(^s*)|(s*$)/g, \"\").length == 0) return true;\n      return false;\n    },\n    //  计算时间差\n    dateTimeDiff : function(inputDate, beCompareDate) {\n        var inputDate=inputDate;  //开始时间\n        var nowDate=beCompareDate || new Date().getTime(); //结束时间\n        var date3=nowDate-inputDate;          //时间差的毫秒数\n        //计算出相差天数\n        var days=Math.floor(date3/(24*3600*1000));\n        //计算出小时数\n        var leave1=date3%(24*3600*1000);      //计算天数后剩余的毫秒数\n        var hours=Math.floor(leave1/(3600*1000));\n        //计算相差分钟数\n        var leave2=leave1%(3600*1000);        //计算小时数后剩余的毫秒数\n        var minutes=Math.floor(leave2/(60*1000));\n        //计算相差秒数\n        var leave3=leave2%(60*1000);          //计算分钟数后剩余的毫秒数\n        var seconds=Math.round(leave3/1000);\n        var timeDiff = [days, hours, minutes, seconds];\n        // console.log(days+'天'+hours+'小时'+minutes+'分'+seconds+'秒');\n        return timeDiff;\n    },\n    //显示当前日期\n    //显示年月日 yyyy-MM-dd\n    //显示年月日小时分钟 yyyy-MM-dd HH:mm\n    now   : function(format) {\n      format = format || 'yyyy-MM-dd hh:mm';\n      var newDate = new Date();\n      return newDate.format(format);\n    },\n    // 上几个月\n    nowBack: function(months){\n      var date = new Date();\n      date.setMonth(date.getMonth() - months);\n      return date.format('yyyy-MM-dd');\n    },\n    // 获取url指定param\n    params: function(k,url){\n      url = url || location.search;\n      var p={};\n      url.replace(/[?&]+([^=&]+)=([^&]*)/gi,function(s,k,v){p[k]=v})\n      return k?p[k]:p;\n    }\n    /************************* 函数区:  end ************************/\n  };\n  /************************* 定义静态方法:  end ************************/\n  Bb.prototype =  {\n    constructor : Bb,\n    //dom选择的一些判断\n    init : function(selector) {\n      if(!selector) { return this; }\n\n      if (typeof selector == 'object') {\n        var selector = [selector];\n        for (var i = 0; i < selector.length; i++) {\n          this[i] = selector[i];\n        }\n        this.length = selector.length;\n        return this;\n      } else if (typeof selector == 'function') {\n        this.ready(selector);\n        return;\n      } else {\n        var selector = selector.trim(), result;\n        if (selector.charAt(0) == '#' && !selector.match('\\\\s')) {\n          selector = selector.substring(1);\n          result = document.getElementById(selector);\n          return result;\n        } else {\n          result = document.querySelectorAll(selector);\n          return result;\n        }\n      }\n    }\n  };\n\n  Bb.prototype.init.prototype = Bb.prototype;\n  window.$$ = window.$bb = Bb;\n  window.$_ = Bb.utils;\n\n})(window, document);\n","//类似php的print_r方法，遍历数据类型和对象的属性和方法。\nfunction print_r(arr,level) {\n  var dumped_text = \"\";\n  if(!level) level = 0;\n\n  //The padding given at the beginning of the line.\n  var level_padding = \"\";\n  for(var j=0;j<level+1;j++) level_padding += \"  \";\n\n  if(typeof(arr) == 'object') { //Array/Hashes/Objects\n    for(var item in arr) {\n      var value = arr[item];\n\n      if(typeof(value) == 'object') { //If it is an array,\n        dumped_text += level_padding + \"'\" + item + \"' ...\\n\";\n        dumped_text += print_r(value,level+1);\n      } else {\n        dumped_text += level_padding + \"'\" + item + \"' => \\\"\" + value + \"\\\"\\n\";\n      }\n    }\n  } else { //Stings/Chars/Numbers etc.\n    dumped_text = \"===>\"+arr+\"<===(\"+typeof(arr)+\")\";\n  }\n  return dumped_text;\n}\n\n//如果只是希望在IE中不出现Firebug调试函数的错误信息，那么可以在页面中加入以下代码\nif (!window.console){\n  var method;\n  var noop = function () {};\n  var methods = [\n      'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',\n      'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',\n      'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',\n      'timeStamp', 'trace', 'warn'\n  ];\n  var length = methods.length;\n  var console = (window.console = window.console || {});\n\n  while (length--) {\n      method = methods[length];\n\n      // Only stub undefined methods.\n      if (!console[method]) {\n          console[method] = noop;\n      }\n  }\n}\n\nif (console && console.assert){\n  console.assert\t= function(cond, text){\n    if( cond ) return;\n    if( console.assert.useDebugger ) debugger;\n    // throw new Error(text || \"Assertion failed!\");\n    // console.log(\"Assertion failed!\");\n  };\n}\n","/**\n * MDN JavaScript Library\n * Copyright (c) 2016 skygreen2001@gmail.com\n *\n * @see JavaScript\n *  https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\n *  https://developer.mozilla.org/en-US/docs/Web/JavaScript\n * @see Standard built-in objects\n *  https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects\n *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n * @author skygreen2001 skygreen2001@gmail.com\n */\n\n/**\n * @see Array\n *  https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\n *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n */\n\n/**\n * @see Function\n *  https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function\n *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n */\n\n/**\n * @see Object\n *  https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\n *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n */\n\n/**\n * @see String\n *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n */\n\n/********************************************************************/\n/*********************** 现已使用 js-polyfills 库 ********************/\n/******** 访问地址: https://github.com/inexorabletash/polyfill *******/\n/********************************************************************/\n","/**\n * JavaScript Shim Library\n * Copyright (c) 2016 skygreen2001@gmail.com\n *\n * @author skygreen2001 skygreen2001@gmail.com\n */\n\n/*******************************Array Prototype Shim**************************************/\n// 去除数组 a 里所包含的元素\n// @see http://stackoverflow.com/questions/1187518/javascript-array-difference\n// @example: [1,2,3,4,5,6].diff( [3,4,5] );  => [1, 2, 6]\n// @example:[\"test1\", \"test2\",\"test3\",\"test4\",\"test5\",\"test6\"].diff([\"test1\",\"test2\",\"test3\",\"test4\"]);   => [\"test5\", \"test6\"]\nArray.prototype.diff = function(a) {\n  return this.filter(function(i) {return a.indexOf(i) < 0;});\n};\n\n//对象数组,根据指定对象key获取数组中指定对象\n//@example var array=[{\"a\":\"1\",\"n\":\"w\"},{\"a\":\"2\",\"n\":\"h\"},{\"a\":\"3\",\"n\":\"k\"}}];  array.getObjectBy(\"a\",\"2\")=>{\"a\":\"2\",\"n\":\"h\"}\nArray.prototype.getObjectBy = function (name, value) {\n  var index=-1;\n  for (var i = 0; i < this.length; i++) {\n      if (this[i][name] == value) {\n          return this[i];\n      }\n  }\n  return null;\n};\n\n//对象数组,根据指定对象key获取数组中指定对象\n//@example var array=[{\"a\":\"1\",\"n\":\"w\"},{\"a\":\"2\",\"n\":\"h\"},{\"a\":\"3\",\"n\":\"k\"}}];  array.getIndexBy(\"a\",\"2\")=>1\nArray.prototype.getIndexBy = function (name, value) {\n  for (var i = 0; i < this.length; i++) {\n    if (this[i][name] == value) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n//数组中去除指定值元素的数组\n//@example var a=[3,4,5]; a.remove(4); => [3,5]\nArray.prototype.remove = function(element) {\n    var index = this.indexOf(element);\n    if (index >= 0) {\n        this.splice(index, 1);\n        return true;\n    }\n    return false;\n};\n\n//Array.prototype.includes 的别名\nif (!Array.prototype.contains) {\n  Array.prototype.contains = function(searchElement /*, fromIndex*/) {\n    return this.includes(searchElement /*, fromIndex*/);\n  };\n}\n\n/*******************************Date Prototype Shim**************************************/\n// 对Date的扩展，将 Date 转化为指定格式的String\n// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，\n// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\n// 例子：\n// (new Date()).format(\"yyyy-MM-dd hh:mm:ss.S\") ==> 2006-07-02 08:09:04.423\n// (new Date()).format(\"yyyy-M-d h:m:s.S\")      ==> 2006-7-2 8:9:4.18\nDate.prototype.format = function(fmt)\n{\n  fmt = fmt || \"yyyy-MM-dd\";\n  var o = {\n    \"M+\" : this.getMonth()+1,                 //月份\n    \"d+\" : this.getDate(),                    //日\n    \"h+\" : this.getHours(),                   //小时\n    \"m+\" : this.getMinutes(),                 //分\n    \"s+\" : this.getSeconds(),                 //秒\n    \"q+\" : Math.floor((this.getMonth()+3)/3), //季度\n    \"S\"  : this.getMilliseconds()             //毫秒\n  };\n  if(/(y+)/.test(fmt))\n    fmt = fmt.replace(RegExp.$1, (this.getFullYear()+\"\").substr(4 - RegExp.$1.length));\n  for(var k in o)\n    if(new RegExp(\"(\"+ k +\")\").test(fmt))\n      fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : ((\"00\"+ o[k]).substr((\"\"+ o[k]).length)));\n  return fmt;\n};\n\n/*******************************String Prototype Shim**************************************/\n//是否包含指定字符串\nString.prototype.contains = function(substr) {\n    if(substr==null||substr==\"\"||this.length==0||substr.length>this.length)\n        return false;\n    return this.indexOf(substr) > 0;\n};\n\n//去除字符串中包含所有的空字符\nString.prototype.trimAll = function(str){\n    return str.replace(/\\s*/g, '');\n};\n\n//计算中文字符串长度[包括英文数字长度]\nString.prototype.chineseLength = function() {\n  var len = 0;\n  for (var i=0; i<this.length; i++) {\n    if (this.charCodeAt(i)>127 || this.charCodeAt(i) == 94) {\n      len += 2;\n    } else {\n      len ++;\n    }\n  }\n  return len;\n};\n\n/**\n * JS截取字符串，中英文都能用\n * 如果给定的字符串大于指定长度，截取指定长度返回，否者返回源字符串。\n * @param startIndex：需要截取的字符串的起始位置\n * @param len: 需要截取的长度\n */\nString.prototype.chineseSubstr = function(startIndex, length)\n{\n  var str_length = 0;\n  var str_len = 0;\n  str_cut = new String();\n  str_len = this.chineseLength();\n  if (str_len < length) return this.substring(startIndex, str_len);\n  for(var i = startIndex; i < str_len; i++)\n  {\n    a = this.charAt(i);\n    str_length++;\n    if(escape(a).length > 4) str_length++;//中文字符的长度经编码之后大于4\n    str_cut = str_cut.concat(a);\n    if(str_length>=length)\n    {\n      str_cut = str_cut.concat(\"...\");\n      return str_cut;\n    }\n  }\n  //如果给定字符串小于指定长度，则返回源字符串；\n  if(str_length < length) return  this;\n};\n\n//查看字符串是否手机号\nString.prototype.isMobile=function checkMobile(){\n  if(/^1([3-5]|[7-8])[0-9]\\d{8}$/.test(this)){\n    return true;\n  }\n  return false;\n};\n"]}