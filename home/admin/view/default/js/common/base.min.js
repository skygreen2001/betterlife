/**
 * Betterlife JavaScript Library
 * Copyright (c) 2016 skygreen2001@gmail.com
 * @see APICloud script/app.js
 * @see 可想造一个属于你自己的jQuery库?: https://github.com/MeCKodo/forchange
 * @author skygreen2001 skygreen2001@gmail.com
 */
(function(window, document){
  var ua = navigator.userAgent.toLowerCase();

  var Bb = function(selector) {
    return new Bb.prototype.init(selector);
  };

  /************************* 定义静态方法:start ************************/
  Bb.t = Bb.u = Bb.tools = Bb.utils = {
    ua      : navigator.userAgent.toLowerCase(),
    browser : {
      trident : /trident/.test(ua),//IE内核
      mobile  : !!ua.match(/applewebkit.*mobile.*/) || !!ua.match(/applewebkit/),
      android : /android/.test(ua) || /linux/.test(ua),
      ios     : !!ua.match(/\(i[^;]+;( u;)? cpu.+mac os x/)
    },

    /************************* 函数区:start ************************/
    //判断字符串是否为空
    empty : function(data) {
      if (typeof(data) == "undefined") return true;
      if (!data) return true;
      if ((typeof(data) == "string") && data.replace(/(^s*)|(s*$)/g, "").length == 0) return true;
      return false;
    },
    //  计算时间差
    dateTimeDiff : function(inputDate, beCompareDate) {
        var inputDate=inputDate;  //开始时间
        var nowDate=beCompareDate || new Date().getTime(); //结束时间
        var date3=nowDate-inputDate;          //时间差的毫秒数
        //计算出相差天数
        var days=Math.floor(date3/(24*3600*1000));
        //计算出小时数
        var leave1=date3%(24*3600*1000);      //计算天数后剩余的毫秒数
        var hours=Math.floor(leave1/(3600*1000));
        //计算相差分钟数
        var leave2=leave1%(3600*1000);        //计算小时数后剩余的毫秒数
        var minutes=Math.floor(leave2/(60*1000));
        //计算相差秒数
        var leave3=leave2%(60*1000);          //计算分钟数后剩余的毫秒数
        var seconds=Math.round(leave3/1000);
        var timeDiff = [days, hours, minutes, seconds];
        // console.log(days+'天'+hours+'小时'+minutes+'分'+seconds+'秒');
        return timeDiff;
    },
    //显示当前日期
    //显示年月日 yyyy-MM-dd
    //显示年月日小时分钟 yyyy-MM-dd HH:mm
    now   : function(format) {
      format = format || 'yyyy-MM-dd hh:mm';
      var newDate = new Date();
      return newDate.format(format);
    },
    // 上几个月
    nowBack: function(months){
      var date = new Date();
      date.setMonth(date.getMonth() - months);
      return date.format('yyyy-MM-dd');
    },
    // 获取url指定param
    params: function(k,url){
      url = url || location.search;
      var p={};
      url.replace(/[?&]+([^=&]+)=([^&]*)/gi,function(s,k,v){p[k]=v})
      return k?p[k]:p;
    }
    /************************* 函数区:  end ************************/
  };
  /************************* 定义静态方法:  end ************************/
  Bb.prototype =  {
    constructor : Bb,
    //dom选择的一些判断
    init : function(selector) {
      if(!selector) { return this; }

      if (typeof selector == 'object') {
        var selector = [selector];
        for (var i = 0; i < selector.length; i++) {
          this[i] = selector[i];
        }
        this.length = selector.length;
        return this;
      } else if (typeof selector == 'function') {
        this.ready(selector);
        return;
      } else {
        var selector = selector.trim(), result;
        if (selector.charAt(0) == '#' && !selector.match('\\s')) {
          selector = selector.substring(1);
          result = document.getElementById(selector);
          return result;
        } else {
          result = document.querySelectorAll(selector);
          return result;
        }
      }
    }
  };

  Bb.prototype.init.prototype = Bb.prototype;
  window.$$ = window.$bb = Bb;
  window.$_ = Bb.utils;

})(window, document);

//类似php的print_r方法，遍历数据类型和对象的属性和方法。
function print_r(arr,level) {
  var dumped_text = "";
  if(!level) level = 0;

  //The padding given at the beginning of the line.
  var level_padding = "";
  for(var j=0;j<level+1;j++) level_padding += "  ";

  if(typeof(arr) == 'object') { //Array/Hashes/Objects
    for(var item in arr) {
      var value = arr[item];

      if(typeof(value) == 'object') { //If it is an array,
        dumped_text += level_padding + "'" + item + "' ...\n";
        dumped_text += print_r(value,level+1);
      } else {
        dumped_text += level_padding + "'" + item + "' => \"" + value + "\"\n";
      }
    }
  } else { //Stings/Chars/Numbers etc.
    dumped_text = "===>"+arr+"<===("+typeof(arr)+")";
  }
  return dumped_text;
}

//如果只是希望在IE中不出现Firebug调试函数的错误信息，那么可以在页面中加入以下代码
if (!window.console){
  var method;
  var noop = function () {};
  var methods = [
      'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
      'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
      'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
      'timeStamp', 'trace', 'warn'
  ];
  var length = methods.length;
  var console = (window.console = window.console || {});

  while (length--) {
      method = methods[length];

      // Only stub undefined methods.
      if (!console[method]) {
          console[method] = noop;
      }
  }
}

if (console && console.assert){
  console.assert	= function(cond, text){
    if( cond ) return;
    if( console.assert.useDebugger ) debugger;
    // throw new Error(text || "Assertion failed!");
    // console.log("Assertion failed!");
  };
}

/**
 * MDN JavaScript Library
 * Copyright (c) 2016 skygreen2001@gmail.com
 *
 * @see JavaScript
 *  https://developer.mozilla.org/zh-CN/docs/Web/JavaScript
 *  https://developer.mozilla.org/en-US/docs/Web/JavaScript
 * @see Standard built-in objects
 *  https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects
 *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
 * @author skygreen2001 skygreen2001@gmail.com
 */

/**
 * @see Array
 *  https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array
 *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array
 */

/**
 * @see Function
 *  https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function
 *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function
 */

/**
 * @see Object
 *  https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object
 *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
 */

/**
 * @see String
 *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String
 */

/********************************************************************/
/*********************** 现已使用 js-polyfills 库 ********************/
/******** 访问地址: https://github.com/inexorabletash/polyfill *******/
/********************************************************************/

/**
 * JavaScript Shim Library
 * Copyright (c) 2016 skygreen2001@gmail.com
 *
 * @author skygreen2001 skygreen2001@gmail.com
 */

/*******************************Array Prototype Shim**************************************/
// 去除数组 a 里所包含的元素
// @see http://stackoverflow.com/questions/1187518/javascript-array-difference
// @example: [1,2,3,4,5,6].diff( [3,4,5] );  => [1, 2, 6]
// @example:["test1", "test2","test3","test4","test5","test6"].diff(["test1","test2","test3","test4"]);   => ["test5", "test6"]
Array.prototype.diff = function(a) {
  return this.filter(function(i) {return a.indexOf(i) < 0;});
};

//对象数组,根据指定对象key获取数组中指定对象
//@example var array=[{"a":"1","n":"w"},{"a":"2","n":"h"},{"a":"3","n":"k"}}];  array.getObjectBy("a","2")=>{"a":"2","n":"h"}
Array.prototype.getObjectBy = function (name, value) {
  var index=-1;
  for (var i = 0; i < this.length; i++) {
      if (this[i][name] == value) {
          return this[i];
      }
  }
  return null;
};

//对象数组,根据指定对象key获取数组中指定对象
//@example var array=[{"a":"1","n":"w"},{"a":"2","n":"h"},{"a":"3","n":"k"}}];  array.getIndexBy("a","2")=>1
Array.prototype.getIndexBy = function (name, value) {
  for (var i = 0; i < this.length; i++) {
    if (this[i][name] == value) {
      return i;
    }
  }
  return -1;
};

//数组中去除指定值元素的数组
//@example var a=[3,4,5]; a.remove(4); => [3,5]
Array.prototype.remove = function(element) {
    var index = this.indexOf(element);
    if (index >= 0) {
        this.splice(index, 1);
        return true;
    }
    return false;
};

//Array.prototype.includes 的别名
if (!Array.prototype.contains) {
  Array.prototype.contains = function(searchElement /*, fromIndex*/) {
    return this.includes(searchElement /*, fromIndex*/);
  };
}

/*******************************Date Prototype Shim**************************************/
// 对Date的扩展，将 Date 转化为指定格式的String
// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，
// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)
// 例子：
// (new Date()).format("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423
// (new Date()).format("yyyy-M-d h:m:s.S")      ==> 2006-7-2 8:9:4.18
Date.prototype.format = function(fmt)
{
  fmt = fmt || "yyyy-MM-dd";
  var o = {
    "M+" : this.getMonth()+1,                 //月份
    "d+" : this.getDate(),                    //日
    "h+" : this.getHours(),                   //小时
    "m+" : this.getMinutes(),                 //分
    "s+" : this.getSeconds(),                 //秒
    "q+" : Math.floor((this.getMonth()+3)/3), //季度
    "S"  : this.getMilliseconds()             //毫秒
  };
  if(/(y+)/.test(fmt))
    fmt = fmt.replace(RegExp.$1, (this.getFullYear()+"").substr(4 - RegExp.$1.length));
  for(var k in o)
    if(new RegExp("("+ k +")").test(fmt))
      fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : (("00"+ o[k]).substr((""+ o[k]).length)));
  return fmt;
};

/*******************************String Prototype Shim**************************************/
//是否包含指定字符串
String.prototype.contains = function(substr) {
    if(substr==null||substr==""||this.length==0||substr.length>this.length)
        return false;
    return this.indexOf(substr) > 0;
};

//去除字符串中包含所有的空字符
String.prototype.trimAll = function(str){
    return str.replace(/\s*/g, '');
};

//计算中文字符串长度[包括英文数字长度]
String.prototype.chineseLength = function() {
  var len = 0;
  for (var i=0; i<this.length; i++) {
    if (this.charCodeAt(i)>127 || this.charCodeAt(i) == 94) {
      len += 2;
    } else {
      len ++;
    }
  }
  return len;
};

/**
 * JS截取字符串，中英文都能用
 * 如果给定的字符串大于指定长度，截取指定长度返回，否者返回源字符串。
 * @param startIndex：需要截取的字符串的起始位置
 * @param len: 需要截取的长度
 */
String.prototype.chineseSubstr = function(startIndex, length)
{
  var str_length = 0;
  var str_len = 0;
  str_cut = new String();
  str_len = this.chineseLength();
  if (str_len < length) return this.substring(startIndex, str_len);
  for(var i = startIndex; i < str_len; i++)
  {
    a = this.charAt(i);
    str_length++;
    if(escape(a).length > 4) str_length++;//中文字符的长度经编码之后大于4
    str_cut = str_cut.concat(a);
    if(str_length>=length)
    {
      str_cut = str_cut.concat("...");
      return str_cut;
    }
  }
  //如果给定字符串小于指定长度，则返回源字符串；
  if(str_length < length) return  this;
};

//查看字符串是否手机号
String.prototype.isMobile=function checkMobile(){
  if(/^1([3-5]|[7-8])[0-9]\d{8}$/.test(this)){
    return true;
  }
  return false;
};


//# sourceMappingURL=base.min.js.map
